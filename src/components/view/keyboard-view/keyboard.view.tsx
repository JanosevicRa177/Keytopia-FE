/* eslint-disable react-hooks/exhaustive-deps */
import { Flex, Box, Text, FormLabel, Select, Button } from "@chakra-ui/react";
import { useState, useEffect } from "react";
import { ApiResponse } from "../../../store/auth-store/types/response.type";
import { SortDirection } from "../../../utils/enum";
import { Pagination } from "../../paging/pagination/pagination";
import { PartFilterSort } from "../../filter-sort-components/part.filter-sort";
import { PartData } from "../../../store/keyboard-store/types/keyboard.type";
import { useFetchKeyboardPage } from "../../../hooks/keyboard-hooks/keyboard.get-all-page.hook";
import { useDeleteKeyboard } from "../../../hooks/keyboard-hooks/keyboard.delete.hook";
import { KeyboardCard } from "../../part-card-component/keyboard-card";
import { useNavigate } from "react-router-dom";
import { colorPallete } from "../../../styles/color";
import { useRemoveUnusedKeyboards } from "../../../hooks/keyboard-hooks/keyboard.remove-unused.hook";
import { useApplicationStore } from "../../../store/store";

export const KeyboardView = () => {
	const [currentPage, setCurrentPage] = useState<number>(0);
	const navigate = useNavigate();
	const { getKeyboardPage, getKeyboardPageRes } = useFetchKeyboardPage();
	const { removeUnusedKeyboards } = useRemoveUnusedKeyboards();
	const [searchName, setSearchName] = useState("");
	const [generatedByAdmin, setGeneratedByAdmin] = useState<boolean | undefined>();
	const [sortedDirection, setSortedDirection] = useState<SortDirection>(SortDirection.UNSORTED);
	const { deleteKeyboard } = useDeleteKeyboard();
	const user = useApplicationStore((state) => state.user);

	useEffect(() => {
		fetchPage(0);
	}, []);
	useEffect(() => {
		fetchPage(0);
	}, [generatedByAdmin]);

	async function handleDeleteKeyboard(part: PartData) {
		deleteKeyboard(part.name).then((response: ApiResponse<null>) => {
			if (response.status === "SUCCESS") {
				fetchPage(0);
			}
		});
	}
	async function fetchPage(page: number) {
		getKeyboardPage(page, searchName, sortedDirection, generatedByAdmin).then(() =>
			setCurrentPage(page + 1)
		);
	}
	async function handleShowMoreKeyboard(keyboard: PartData) {
		navigate(`/keyboard/${keyboard.name}`);
	}
	return (
		<Box minW={"927px"}>
			<Flex
				color={"#343434"}
				bg={"rgba(255,255,255,0.9)"}
				px={"32px"}
				py={"32px"}
				boxShadow={"4px 4px 12px 0px rgba(0,0,0,0.3)"}
				rounded={"8px"}
				position={"relative"}
				fontWeight={"bold"}
				flexDirection={"column"}
				alignContent={"center"}
				justifyContent={"center"}
			>
				<Flex justifyContent={"space-between"}>
					<Text fontSize={"2xl"}>Keyboards</Text>
				</Flex>
				<PartFilterSort
					fetchPart={fetchPage}
					setSearchName={setSearchName}
					setSortedDirection={setSortedDirection}
					sortedDirection={sortedDirection}
					searchName={searchName}
				/>
				{user?.role === "ADMIN" && (
					<Flex mt={"16px"} justifyContent={"space-between"}>
						<Flex flexDir={"column"} w={"calc(33% - 8px)"}>
							<FormLabel fontWeight={"semibold"}>Generated by</FormLabel>
							<Select
								rounded={"4px"}
								h={"45px"}
								borderColor={colorPallete.inputBorder}
								onChange={(e) => {
									if (e.target.value === "undefined") setGeneratedByAdmin(undefined);
									else setGeneratedByAdmin(e.target.value === "true");
								}}
								_hover={{
									borderColor: colorPallete.inputBorderHover,
								}}
								defaultValue={"undefined"}
							>
								<option value={"true"}>Admin generated</option>
								<option value={"false"}>Buyer generated</option>
								<option value={"undefined"}>All</option>
							</Select>
						</Flex>
						<Flex w={"calc(33% - 8px)"} alignItems={"end"}>
							<Button
								w={"100%"}
								h={"45px"}
								rounded={"4px"}
								overflow={"hidden"}
								bg={colorPallete.deleteButton}
								_hover={{
									bg: colorPallete.deleteButtonHover,
									transform: "scale(1.03,1.03)",
									transition: "0.2s",
								}}
								fontSize={"xl"}
								color={"white"}
								onClick={() => {
									removeUnusedKeyboards().then(() => fetchPage(0));
								}}
							>
								Remove unused keyboards
							</Button>
						</Flex>
					</Flex>
				)}
				<Flex fontSize={"md"} flexWrap={"wrap"} gap={"24px"} my={"32px"}>
					{getKeyboardPageRes.data.content.map((keyboard: PartData) => (
						<KeyboardCard
							key={keyboard.name}
							keyboard={keyboard}
							deleteKeyboard={handleDeleteKeyboard}
							showMore={handleShowMoreKeyboard}
						/>
					))}
				</Flex>
				<Pagination
					currentPage={currentPage}
					lastPage={getKeyboardPageRes.data.totalPages}
					maxLength={5}
					setCurrentPage={setCurrentPage}
					getPage={fetchPage}
				/>
			</Flex>
		</Box>
	);
};
